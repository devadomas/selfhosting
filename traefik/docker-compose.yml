services:
  public:
    image: traefik:v3.3
    container_name: traefik
    command:
      - "--log.level=INFO"
      # Docker
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # HTTP -> HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.domains[0].main=$BASE_DOMAIN"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.$BASE_DOMAIN"
      - "--entrypoints.websecure.http.tls.certresolver=myresolver"
      # Cert generation for domain and wildcard subdomains
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=$ACME_EMAIL"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    environment:
      # Cloudflare
      - CF_API_EMAIL=$CF_API_EMAIL
      - CF_API_KEY=$CF_API_KEY
      # Portainer templating envs
      # - BASE_DOMAIN
      # - ACME_EMAIL
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Listen to docker events read-only
      # - "/var/log/traefik:/var/log" # For access logs (TODO)
      - "/root/letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
    networks:
      - public


  # Just for testing
  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.$BASE_DOMAIN`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"
    # environment:
      # Portainer templating envs
      # - BASE_DOMAIN
    networks:
      - public

# Network
networks:
  public:
    driver: bridge